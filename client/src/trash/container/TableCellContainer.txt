import { useEffect } from 'react';
import useStore from '../../store/useStore';
import ValueStore from '../../store/ValueStore';
import DropdownContainer from './DropdownContainer';
import { ColumnInfo } from './TableContainer';

interface Props {
  columnInfo: ColumnInfo;
  cellIndex?: { row: number; col: string };
  clickedTableCellIndex?: { row: number; col: string };
  tableCellInput?: string;
  value: number | string;
  eventHandler: {
    onDivClick?: (e: React.MouseEvent<HTMLDivElement>) => void;
    onInputClick?: (e: React.MouseEvent<HTMLInputElement>) => void;
    onInputChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    onSelectChange?: (e: React.ChangeEvent<HTMLSelectElement>) => void;
    onKeyPress?: (e: React.KeyboardEvent<HTMLInputElement>) => void;
    onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;
  };
}

const TableCellContainer: React.FC<Props> = ({
  columnInfo,
  cellIndex,
  clickedTableCellIndex,
  tableCellInput,
  value,
  eventHandler: { onDivClick, onInputClick, onInputChange, onSelectChange, onKeyPress, onBlur },
}: Props): JSX.Element => {
  const { valueStore } = useStore();

  if (columnInfo.tagName == 'select') {
    return (
      <div id={`${cellIndex!.row},${cellIndex!.col}`} onClick={onDivClick}>
        <DropdownContainer
          name={columnInfo.name}
          value={value}
          contents={columnInfo.contents}
          onChange={onSelectChange || undefined}
        />
      </div>
    );
  }
  return (
    <div className="tableCellContents">
      {columnInfo.type == undefined ? (
        value
      ) : columnInfo.type == 'checkbox' ? (
        <input
          className="tableCellContents"
          id={`${cellIndex!.row},${cellIndex!.col}`}
          type="checkbox"
          value={value ? 1 : 0}
          name={columnInfo.name}
          onClick={onInputClick || undefined}
          checked={value == 1 ? true : false}
        />
      ) : clickedTableCellIndex &&
        clickedTableCellIndex.row == cellIndex!.row &&
        clickedTableCellIndex.col == cellIndex!.col ? (
        columnInfo.tagName == 'input' && columnInfo.type == 'text' ? (
          <input
            className="tableCellContents"
            type="text"
            value={tableCellInput == '-' ? '' : tableCellInput}
            onChange={onInputChange || undefined}
            onKeyPress={onKeyPress || undefined}
            autoFocus
            onBlur={onBlur || undefined}
          />
        ) : columnInfo.tagName == 'select' && columnInfo.type == 'dropdown' ? (
          <DropdownContainer
            name={columnInfo.name}
            value={tableCellInput!}
            contents={columnInfo.contents}
            onChange={onSelectChange || undefined}
          />
        ) : columnInfo.tagName == 'select' && columnInfo.type == 'search' ? (
          <div></div>
        ) : (
          <></>
        )
      ) : (
        <div
          className="tableCellContents"
          id={`${cellIndex!.row},${cellIndex!.col}`}
          onClick={onDivClick}
        >
          {value == '' ? '-' : value}
        </div>
      )}
    </div>
  );
};

export default TableCellContainer;
